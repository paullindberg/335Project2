//Paul Lindberg
//CPSC 335


const rando = getRandomInt(23);
const mainArray = [
[0x0, 0xB, 0xA, 0x3, 0x2, 0x8, 0x4, 0x7, 0x6, 0x5, 0x1, 0x9],
[0x0, 0xA, 0x9, 0x8, 0x1, 0xA, 0x3, 0x9, 0x2, 0x0, 0x1, 0x1],
[0x1, 0x6, 0x3, 0x8, 0x9, 0x4, 0x0, 0xA, 0x5, 0x2, 0xB, 0x7],
[0x1, 0x9, 0x8, 0x4, 0x1, 0xB, 0x3, 0x8, 0x2, 0x6, 0x2, 0x5],
[0x2, 0x9, 0x7, 0xB, 0x4, 0x0, 0x1, 0x6, 0x3, 0x8, 0xA, 0x5],
[0x2, 0x6, 0x1, 0x0, 0x9, 0x4, 0x8, 0x7, 0x8, 0x6, 0x2, 0x6],
[0x3, 0x4, 0x5, 0x7, 0x1, 0x9, 0x2, 0x0, 0x6, 0x8, 0xB, 0xA],
[0x3, 0x5, 0x6, 0xA, 0xA, 0x0, 0x2, 0x3, 0xB, 0x7, 0x2, 0x4],
[0x4, 0xB, 0x6, 0x0, 0x7, 0x9, 0xA, 0x2, 0x1, 0x8, 0x3, 0x5],
[0x4, 0x0, 0xB, 0x0, 0x6, 0x5, 0x6, 0x6, 0x7, 0x1, 0x0, 0xA],
[0x5, 0x2, 0x8, 0x1, 0xA, 0xB, 0x3, 0x4, 0x7, 0x9, 0x0, 0x6],
[0x5, 0x7, 0x5, 0x0, 0x6, 0x8, 0x4, 0xB, 0x8, 0x9, 0x3, 0x4],
[0x6, 0x9, 0x8, 0x7, 0x2, 0xB, 0x3, 0xA, 0x5, 0x4, 0x1, 0x0],
[0x6, 0xA, 0x2, 0x3, 0x0, 0x5, 0x3, 0x0, 0x4, 0x7, 0x8, 0x1],
[0x7, 0x0, 0x1, 0xA, 0x6, 0x9, 0x3, 0x5, 0x4, 0x2, 0xB, 0x8],
[0x7, 0x8, 0x5, 0x2, 0x8, 0x6, 0x1, 0x0, 0x3, 0x4, 0x2, 0x9],
[0x8, 0x7, 0x3, 0xA, 0x9, 0x4, 0x2, 0x5, 0xB, 0x1, 0x6, 0x0],
[0x8, 0xA, 0x1, 0x5, 0x9, 0x3, 0x4, 0x7, 0x9, 0x0, 0x8, 0x5],
[0x9, 0x0, 0xB, 0x3, 0x4, 0x2, 0x7, 0x5, 0x6, 0x1, 0x8, 0xA],
[0x9, 0x9, 0xB, 0x5, 0x3, 0x5, 0x1, 0xA, 0x3, 0x3, 0xA, 0xB],
[0xA, 0x4, 0x0, 0xB, 0x5, 0x8, 0x6, 0x1, 0x7, 0x9, 0x2, 0x3],
[0xA, 0x3, 0x9, 0x5, 0x9, 0xA, 0x2, 0x2, 0xA, 0x4, 0x4, 0x4],
[0xB, 0x8, 0xA, 0x4, 0x6, 0x3, 0x7, 0x9, 0x0, 0x1, 0x5, 0x2],
[0xB, 0x6, 0x0, 0x0, 0x5, 0xA, 0x6, 0x2, 0x7, 0xB, 0x2, 0x3]
];

const temp = [
[0x0, 0xB, 0xA, 0x3, 0x2, 0x8, 0x4, 0x7, 0x6, 0x5, 0x1, 0x9],
[0x0, 0xA, 0x9, 0x8, 0x1, 0xA, 0x3, 0x9, 0x2, 0x0, 0x1, 0x1],
[0x1, 0x6, 0x3, 0x8, 0x9, 0x4, 0x0, 0xA, 0x5, 0x2, 0xB, 0x7],
[0x1, 0x9, 0x8, 0x4, 0x1, 0xB, 0x3, 0x8, 0x2, 0x6, 0x2, 0x5],
[0x2, 0x9, 0x7, 0xB, 0x4, 0x0, 0x1, 0x6, 0x3, 0x8, 0xA, 0x5],
[0x2, 0x6, 0x1, 0x0, 0x9, 0x4, 0x8, 0x7, 0x8, 0x6, 0x2, 0x6],
[0x3, 0x4, 0x5, 0x7, 0x1, 0x9, 0x2, 0x0, 0x6, 0x8, 0xB, 0xA],
[0x3, 0x5, 0x6, 0xA, 0xA, 0x0, 0x2, 0x3, 0xB, 0x7, 0x2, 0x4],
[0x4, 0xB, 0x6, 0x0, 0x7, 0x9, 0xA, 0x2, 0x1, 0x8, 0x3, 0x5],
[0x4, 0x0, 0xB, 0x0, 0x6, 0x5, 0x6, 0x6, 0x7, 0x1, 0x0, 0xA],
[0x5, 0x2, 0x8, 0x1, 0xA, 0xB, 0x3, 0x4, 0x7, 0x9, 0x0, 0x6],
[0x5, 0x7, 0x5, 0x0, 0x6, 0x8, 0x4, 0xB, 0x8, 0x9, 0x3, 0x4],
[0x6, 0x9, 0x8, 0x7, 0x2, 0xB, 0x3, 0xA, 0x5, 0x4, 0x1, 0x0],
[0x6, 0xA, 0x2, 0x3, 0x0, 0x5, 0x3, 0x0, 0x4, 0x7, 0x8, 0x1],
[0x7, 0x0, 0x1, 0xA, 0x6, 0x9, 0x3, 0x5, 0x4, 0x2, 0xB, 0x8],
[0x7, 0x8, 0x5, 0x2, 0x8, 0x6, 0x1, 0x0, 0x3, 0x4, 0x2, 0x9],
[0x8, 0x7, 0x3, 0xA, 0x9, 0x4, 0x2, 0x5, 0xB, 0x1, 0x6, 0x0],
[0x8, 0xA, 0x1, 0x5, 0x9, 0x3, 0x4, 0x7, 0x9, 0x0, 0x8, 0x5],
[0x9, 0x0, 0xB, 0x3, 0x4, 0x2, 0x7, 0x5, 0x6, 0x1, 0x8, 0xA],
[0x9, 0x9, 0xB, 0x5, 0x3, 0x5, 0x1, 0xA, 0x3, 0x3, 0xA, 0xB],
[0xA, 0x4, 0x0, 0xB, 0x5, 0x8, 0x6, 0x1, 0x7, 0x9, 0x2, 0x3],
[0xA, 0x3, 0x9, 0x5, 0x9, 0xA, 0x2, 0x2, 0xA, 0x4, 0x4, 0x4],
[0xB, 0x8, 0xA, 0x4, 0x6, 0x3, 0x7, 0x9, 0x0, 0x1, 0x5, 0x2],
[0xB, 0x6, 0x0, 0x0, 0x5, 0xA, 0x6, 0x2, 0x7, 0xB, 0x2, 0x3]
];

const insertEx = [
[0x0, 0xB, 0xA, 0x3, 0x2, 0x8, 0x4, 0x7, 0x6, 0x5, 0x1, 0x9],
[0x0, 0xA, 0x9, 0x8, 0x1, 0xA, 0x3, 0x9, 0x2, 0x0, 0x1, 0x1],
[0x1, 0x6, 0x3, 0x8, 0x9, 0x4, 0x0, 0xA, 0x5, 0x2, 0xB, 0x7],
[0x1, 0x9, 0x8, 0x4, 0x1, 0xB, 0x3, 0x8, 0x2, 0x6, 0x2, 0x5],
[0x2, 0x9, 0x7, 0xB, 0x4, 0x0, 0x1, 0x6, 0x3, 0x8, 0xA, 0x5],
[0x2, 0x6, 0x1, 0x0, 0x9, 0x4, 0x8, 0x7, 0x8, 0x6, 0x2, 0x6],
[0x3, 0x4, 0x5, 0x7, 0x1, 0x9, 0x2, 0x0, 0x6, 0x8, 0xB, 0xA],
[0x3, 0x5, 0x6, 0xA, 0xA, 0x0, 0x2, 0x3, 0xB, 0x7, 0x2, 0x4],
[0x4, 0xB, 0x6, 0x0, 0x7, 0x9, 0xA, 0x2, 0x1, 0x8, 0x3, 0x5],
[0x4, 0x0, 0xB, 0x0, 0x6, 0x5, 0x6, 0x6, 0x7, 0x1, 0x0, 0xA],
[0x5, 0x2, 0x8, 0x1, 0xA, 0xB, 0x3, 0x4, 0x7, 0x9, 0x0, 0x6],
[0x5, 0x7, 0x5, 0x0, 0x6, 0x8, 0x4, 0xB, 0x8, 0x9, 0x3, 0x4],
[0x6, 0x9, 0x8, 0x7, 0x2, 0xB, 0x3, 0xA, 0x5, 0x4, 0x1, 0x0],
[0x6, 0xA, 0x2, 0x3, 0x0, 0x5, 0x3, 0x0, 0x4, 0x7, 0x8, 0x1],
[0x7, 0x0, 0x1, 0xA, 0x6, 0x9, 0x3, 0x5, 0x4, 0x2, 0xB, 0x8],
[0x7, 0x8, 0x5, 0x2, 0x8, 0x6, 0x1, 0x0, 0x3, 0x4, 0x2, 0x9],
[0x8, 0x7, 0x3, 0xA, 0x9, 0x4, 0x2, 0x5, 0xB, 0x1, 0x6, 0x0],
[0x8, 0xA, 0x1, 0x5, 0x9, 0x3, 0x4, 0x7, 0x9, 0x0, 0x8, 0x5],
[0x9, 0x0, 0xB, 0x3, 0x4, 0x2, 0x7, 0x5, 0x6, 0x1, 0x8, 0xA],
[0x9, 0x9, 0xB, 0x5, 0x3, 0x5, 0x1, 0xA, 0x3, 0x3, 0xA, 0xB],
[0xA, 0x4, 0x0, 0xB, 0x5, 0x8, 0x6, 0x1, 0x7, 0x9, 0x2, 0x3],
[0xA, 0x3, 0x9, 0x5, 0x9, 0xA, 0x2, 0x2, 0xA, 0x4, 0x4, 0x4],
[0xB, 0x8, 0xA, 0x4, 0x6, 0x3, 0x7, 0x9, 0x0, 0x1, 0x5, 0x2],
[0xB, 0x6, 0x0, 0x0, 0x5, 0xA, 0x6, 0x2, 0x7, 0xB, 0x2, 0x3]
];

const mergeEx = [
[0x0, 0xB, 0xA, 0x3, 0x2, 0x8, 0x4, 0x7, 0x6, 0x5, 0x1, 0x9],
[0x0, 0xA, 0x9, 0x8, 0x1, 0xA, 0x3, 0x9, 0x2, 0x0, 0x1, 0x1],
[0x1, 0x6, 0x3, 0x8, 0x9, 0x4, 0x0, 0xA, 0x5, 0x2, 0xB, 0x7],
[0x1, 0x9, 0x8, 0x4, 0x1, 0xB, 0x3, 0x8, 0x2, 0x6, 0x2, 0x5],
[0x2, 0x9, 0x7, 0xB, 0x4, 0x0, 0x1, 0x6, 0x3, 0x8, 0xA, 0x5],
[0x2, 0x6, 0x1, 0x0, 0x9, 0x4, 0x8, 0x7, 0x8, 0x6, 0x2, 0x6],
[0x3, 0x4, 0x5, 0x7, 0x1, 0x9, 0x2, 0x0, 0x6, 0x8, 0xB, 0xA],
[0x3, 0x5, 0x6, 0xA, 0xA, 0x0, 0x2, 0x3, 0xB, 0x7, 0x2, 0x4],
[0x4, 0xB, 0x6, 0x0, 0x7, 0x9, 0xA, 0x2, 0x1, 0x8, 0x3, 0x5],
[0x4, 0x0, 0xB, 0x0, 0x6, 0x5, 0x6, 0x6, 0x7, 0x1, 0x0, 0xA],
[0x5, 0x2, 0x8, 0x1, 0xA, 0xB, 0x3, 0x4, 0x7, 0x9, 0x0, 0x6],
[0x5, 0x7, 0x5, 0x0, 0x6, 0x8, 0x4, 0xB, 0x8, 0x9, 0x3, 0x4],
[0x6, 0x9, 0x8, 0x7, 0x2, 0xB, 0x3, 0xA, 0x5, 0x4, 0x1, 0x0],
[0x6, 0xA, 0x2, 0x3, 0x0, 0x5, 0x3, 0x0, 0x4, 0x7, 0x8, 0x1],
[0x7, 0x0, 0x1, 0xA, 0x6, 0x9, 0x3, 0x5, 0x4, 0x2, 0xB, 0x8],
[0x7, 0x8, 0x5, 0x2, 0x8, 0x6, 0x1, 0x0, 0x3, 0x4, 0x2, 0x9],
[0x8, 0x7, 0x3, 0xA, 0x9, 0x4, 0x2, 0x5, 0xB, 0x1, 0x6, 0x0],
[0x8, 0xA, 0x1, 0x5, 0x9, 0x3, 0x4, 0x7, 0x9, 0x0, 0x8, 0x5],
[0x9, 0x0, 0xB, 0x3, 0x4, 0x2, 0x7, 0x5, 0x6, 0x1, 0x8, 0xA],
[0x9, 0x9, 0xB, 0x5, 0x3, 0x5, 0x1, 0xA, 0x3, 0x3, 0xA, 0xB],
[0xA, 0x4, 0x0, 0xB, 0x5, 0x8, 0x6, 0x1, 0x7, 0x9, 0x2, 0x3],
[0xA, 0x3, 0x9, 0x5, 0x9, 0xA, 0x2, 0x2, 0xA, 0x4, 0x4, 0x4],
[0xB, 0x8, 0xA, 0x4, 0x6, 0x3, 0x7, 0x9, 0x0, 0x1, 0x5, 0x2],
[0xB, 0x6, 0x0, 0x0, 0x5, 0xA, 0x6, 0x2, 0x7, 0xB, 0x2, 0x3]
];

const quickEx = [
[0x0, 0xB, 0xA, 0x3, 0x2, 0x8, 0x4, 0x7, 0x6, 0x5, 0x1, 0x9],
[0x0, 0xA, 0x9, 0x8, 0x1, 0xA, 0x3, 0x9, 0x2, 0x0, 0x1, 0x1],
[0x1, 0x6, 0x3, 0x8, 0x9, 0x4, 0x0, 0xA, 0x5, 0x2, 0xB, 0x7],
[0x1, 0x9, 0x8, 0x4, 0x1, 0xB, 0x3, 0x8, 0x2, 0x6, 0x2, 0x5],
[0x2, 0x9, 0x7, 0xB, 0x4, 0x0, 0x1, 0x6, 0x3, 0x8, 0xA, 0x5],
[0x2, 0x6, 0x1, 0x0, 0x9, 0x4, 0x8, 0x7, 0x8, 0x6, 0x2, 0x6],
[0x3, 0x4, 0x5, 0x7, 0x1, 0x9, 0x2, 0x0, 0x6, 0x8, 0xB, 0xA],
[0x3, 0x5, 0x6, 0xA, 0xA, 0x0, 0x2, 0x3, 0xB, 0x7, 0x2, 0x4],
[0x4, 0xB, 0x6, 0x0, 0x7, 0x9, 0xA, 0x2, 0x1, 0x8, 0x3, 0x5],
[0x4, 0x0, 0xB, 0x0, 0x6, 0x5, 0x6, 0x6, 0x7, 0x1, 0x0, 0xA],
[0x5, 0x2, 0x8, 0x1, 0xA, 0xB, 0x3, 0x4, 0x7, 0x9, 0x0, 0x6],
[0x5, 0x7, 0x5, 0x0, 0x6, 0x8, 0x4, 0xB, 0x8, 0x9, 0x3, 0x4],
[0x6, 0x9, 0x8, 0x7, 0x2, 0xB, 0x3, 0xA, 0x5, 0x4, 0x1, 0x0],
[0x6, 0xA, 0x2, 0x3, 0x0, 0x5, 0x3, 0x0, 0x4, 0x7, 0x8, 0x1],
[0x7, 0x0, 0x1, 0xA, 0x6, 0x9, 0x3, 0x5, 0x4, 0x2, 0xB, 0x8],
[0x7, 0x8, 0x5, 0x2, 0x8, 0x6, 0x1, 0x0, 0x3, 0x4, 0x2, 0x9],
[0x8, 0x7, 0x3, 0xA, 0x9, 0x4, 0x2, 0x5, 0xB, 0x1, 0x6, 0x0],
[0x8, 0xA, 0x1, 0x5, 0x9, 0x3, 0x4, 0x7, 0x9, 0x0, 0x8, 0x5],
[0x9, 0x0, 0xB, 0x3, 0x4, 0x2, 0x7, 0x5, 0x6, 0x1, 0x8, 0xA],
[0x9, 0x9, 0xB, 0x5, 0x3, 0x5, 0x1, 0xA, 0x3, 0x3, 0xA, 0xB],
[0xA, 0x4, 0x0, 0xB, 0x5, 0x8, 0x6, 0x1, 0x7, 0x9, 0x2, 0x3],
[0xA, 0x3, 0x9, 0x5, 0x9, 0xA, 0x2, 0x2, 0xA, 0x4, 0x4, 0x4],
[0xB, 0x8, 0xA, 0x4, 0x6, 0x3, 0x7, 0x9, 0x0, 0x1, 0x5, 0x2],
[0xB, 0x6, 0x0, 0x0, 0x5, 0xA, 0x6, 0x2, 0x7, 0xB, 0x2, 0x3]
];

//mainArray[rando];

var insertArray = insertEx[rando];
var mergeArray = mergeEx[rando];
var quickArray = quickEx[rando];


var main_block = true;
var insertion_block = true;
var insertion_complete = false;
var merge_complete = false;
var quick_complete = false;

var pivot = quickArray[quickArray.length - 1];
var h = 0;
var left_ptr = 0;
var right_ptr = quickArray.length - 2;

var insertion_i = 0;


function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}

//Merge Global Variables
var merge_result = mergeArray.map(num => [num]);
var merge_i = 0;
var merge_temp = [];



let ops = 0;  // for performance evaluation only

function mergeStep () {
	
    const oddNumbered = merge_result.length % 2 !== 0;

    // iterate 2 subarrays at a time and merge into larger subarray
      let a = merge_result[merge_i];
      let b = merge_result[merge_i + 1];

      // pre-merge 3 subarrays into 2 if there are odd number of subarrays
      if (oddNumbered && merge_i === (merge_result.length - 3)) {
        b = merge(b, merge_result[merge_i + 2]);
        merge_i++;
      }
      // accumulate intermediate result
      merge_temp.push(merge(a, b));
	  merge_i += 2;
	  document.getElementById("merge").innerHTML = merge_temp;

    // current level merged, update result
	if (merge_i >= merge_result.length){
    merge_result = merge_temp;
	merge_i = 0;
	merge_temp = [];

	}

  
  if (merge_result.length == 1){
  merge_complete = true; //stop while loop
  document.getElementById("mergestatus").innerHTML = "Done!";
  }
}

function merge (arrA, arrB) {
  const merged = [];
  let j = 0;
  let k = 0;

  while (merged.length !== (arrA.length + arrB.length)) {
    ops++;
    if (arrB[k] === undefined || arrA[j] <= arrB[k]) {
      merged.push(arrA[j]);
      j++;
    } else if (arrA[j] === undefined || arrA[j] > arrB[k]) {
      merged.push(arrB[k]);
      k++;
    }
  }
  return merged;
}



function increment(){
	
if (!insertion_complete) {
	insertionStep();
	}
if (checkSorted(insertArray)){
	insertion_complete = true;
  	document.getElementById("test").innerHTML = "Done!";
}


if (!merge_complete){
	mergeStep();
}
if (!quick_complete){
	quickStep();
}
if (checkSorted(quickArray)){
	quick_complete = true;
	document.getElementById("quickstatus").innerHTML = "Done!";
}
	
}



function checkSorted(arr){

	for (let i = 0; i < arr.length - 1; i++) {
		if (arr[i] > arr[i+1]) {
		return false;
		}
	}
	return true;
	
	
}


/*
function insertionSort(array) {
  for(var i = 0; i < array.length; i++) {
    var temp = array[i];
    var j = i - 1;
    while (j >= 0 && array[j] > temp) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = temp;

  }
  return array;
}
*/




function insertionStep() {

    var temp = insertArray[insertion_i];
    var j = insertion_i - 1;
    while (j >= 0 && insertArray[j] > temp) {
      insertArray[j + 1] = insertArray[j];
      j--;
    }
    insertArray[j + 1] = temp;
	insertion_i++;
	document.getElementById("sorted").innerHTML = insertArray;
  

}
  
var r = 2;
var used = [];



function quickStep(){
	document.getElementById("pivot").innerHTML = "Pivot = " + pivot;
	let finished = false;
	while (quickArray[left_ptr] <= pivot){
		++left_ptr;
	}
	while (quickArray[right_ptr] >= pivot && right_ptr > 0){
		--right_ptr;
	}
	if (left_ptr >= right_ptr){
		finished = true;
	}
	if (quickArray[left_ptr] > quickArray[right_ptr] && !finished){
		quickArray[left_ptr]=quickArray[left_ptr]+quickArray[right_ptr]; 
		quickArray[right_ptr]=quickArray[left_ptr]-quickArray[right_ptr]; 
		quickArray[left_ptr]=quickArray[left_ptr]-quickArray[right_ptr];
		document.getElementById("quick").innerHTML = quickArray;
	}
	
	if (finished){
		used.push(pivot);
		
		if (quickArray[left_ptr] > pivot){
		quickArray[left_ptr] = quickArray[left_ptr] + quickArray[quickArray.length - 1];
		quickArray[quickArray.length - 1] = quickArray[left_ptr] - quickArray[quickArray.length - 1];
		quickArray[left_ptr] = quickArray[left_ptr] - quickArray[quickArray.length - 1];
		document.getElementById("quick").innerHTML = quickArray;
		pivot = newPivot();
		}

		else{
		pivot = newPivot();
		}
		
		left_ptr = 0;
		right_ptr = quickArray.length - 2;
		finished = false;
		
	}
	
}

function newPivot(){
	
	var rand;
	var this_result;
	while(true){
		rand = getRandomInt(11);
		this_result = quickArray[rand];
		if(!used.includes(this_result)){
			return quickArray[rand];
		}
		
	}

}
	




const displayArr = temp[rando];
for (let i = 0; i < 12; i++){
	displayArr[i] = displayArr[i].toString(16).toUpperCase();
	
}
/*
const displaySorted = insertionSort(mainArray[rando]);
for (let i = 0; i < 12; i++){
	displaySorted[i] = displaySorted[i].toString(16).toUpperCase();
	
}

*/


document.getElementById("demo").innerHTML = displayArr;





//document.getElementById("demo").innerHTML = mainArray[rando].toString(16).toUpperCase();

//document.getElementById("demo").innerHTML = getRandomInt(23);
